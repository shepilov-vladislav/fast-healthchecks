{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"FastHealthcheck <p>Framework agnostic health checks with integrations for most popular ASGI frameworks: FastAPI / Faststream / Litestar to help you to implement the Health Check API pattern</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install fast-healthchecks\n</code></pre></p> <p>With <code>poetry</code>: <pre><code>poetry add fast-healthchecks\n</code></pre></p> <p>With <code>uv</code>: <pre><code>uv add fast-healthchecks\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>The easier way to use this package is to use the <code>health</code> function.</p> <p>Create the health check endpoint dynamically using different conditions. Each condition is a callable, and you can even have dependencies inside of it:</p> examples/probes.pyFastAPIFaststreamLitestar <pre><code>import asyncio\nimport os\nimport time\nfrom pathlib import Path\nfrom typing import Any\n\nfrom dotenv import load_dotenv\n\nfrom fast_healthchecks.checks.function import FunctionHealthCheck\nfrom fast_healthchecks.checks.kafka import KafkaHealthCheck\nfrom fast_healthchecks.checks.mongo import MongoHealthCheck\nfrom fast_healthchecks.checks.opensearch import OpenSearchHealthCheck\nfrom fast_healthchecks.checks.postgresql.asyncpg import PostgreSQLAsyncPGHealthCheck\nfrom fast_healthchecks.checks.postgresql.psycopg import PostgreSQLPsycopgHealthCheck\nfrom fast_healthchecks.checks.rabbitmq import RabbitMQHealthCheck\nfrom fast_healthchecks.checks.redis import RedisHealthCheck\nfrom fast_healthchecks.checks.types import Check\nfrom fast_healthchecks.checks.url import UrlHealthCheck\nfrom fast_healthchecks.integrations.base import ProbeAsgiResponse\n\n_ = load_dotenv(Path(__file__).parent.parent / \".env\")\n\n\ndef sync_dummy_check() -&gt; bool:\n    time.sleep(0.1)\n    return True\n\n\nasync def async_dummy_check() -&gt; bool:\n    await asyncio.sleep(0.1)\n    return True\n\n\nasync def async_dummy_check_fail() -&gt; bool:\n    msg = \"Failed\"\n    raise Exception(msg) from None  # noqa: TRY002\n    await asyncio.sleep(0.1)\n    return False\n\n\nLIVENESS_CHECKS: list[Check] = [\n    FunctionHealthCheck(func=sync_dummy_check, name=\"Sync dummy\"),\n]\n\nREADINESS_CHECKS: list[Check] = [\n    KafkaHealthCheck(\n        bootstrap_servers=os.environ[\"KAFKA_BOOTSTRAP_SERVERS\"],\n        name=\"Kafka\",\n    ),\n    MongoHealthCheck.from_dsn(os.environ[\"MONGO_DSN\"], name=\"Mongo\"),\n    OpenSearchHealthCheck(hosts=os.environ[\"OPENSEARCH_HOSTS\"].split(\",\"), name=\"OpenSearch\"),\n    PostgreSQLAsyncPGHealthCheck.from_dsn(os.environ[\"POSTGRES_DSN\"], name=\"PostgreSQL asyncpg\"),\n    PostgreSQLPsycopgHealthCheck.from_dsn(os.environ[\"POSTGRES_DSN\"], name=\"PostgreSQL psycopg\"),\n    RabbitMQHealthCheck.from_dsn(os.environ[\"RABBITMQ_DSN\"], name=\"RabbitMQ\"),\n    RedisHealthCheck.from_dsn(os.environ[\"REDIS_DSN\"], name=\"Redis\"),\n    UrlHealthCheck(url=\"https://httpbingo.org/status/200\", name=\"URL 200\"),\n]\n\nSTARTUP_CHECKS: list[Check] = [\n    FunctionHealthCheck(func=async_dummy_check, name=\"Async dummy\"),\n]\n\nREADINESS_CHECKS_SUCCESS: list[Check] = [\n    FunctionHealthCheck(func=async_dummy_check, name=\"Async dummy\"),\n]\nREADINESS_CHECKS_FAIL: list[Check] = [\n    FunctionHealthCheck(func=async_dummy_check_fail, name=\"Async dummy fail\"),\n]\n\n\nasync def custom_handler(response: ProbeAsgiResponse) -&gt; Any:  # noqa: ANN401, RUF029\n    \"\"\"Custom handler for probes.\"\"\"\n    return response.data\n</code></pre> <pre><code>from fastapi import FastAPI, status\n\nfrom examples.probes import (\n    LIVENESS_CHECKS,\n    READINESS_CHECKS,\n    READINESS_CHECKS_FAIL,\n    READINESS_CHECKS_SUCCESS,\n    STARTUP_CHECKS,\n    custom_handler,\n)\nfrom fast_healthchecks.integrations.base import Probe\nfrom fast_healthchecks.integrations.fastapi import HealthcheckRouter\n\napp_integration = FastAPI()\napp_integration.include_router(\n    HealthcheckRouter(\n        Probe(\n            name=\"liveness\",\n            checks=LIVENESS_CHECKS,\n        ),\n        Probe(\n            name=\"readiness\",\n            checks=READINESS_CHECKS,\n        ),\n        Probe(\n            name=\"startup\",\n            checks=STARTUP_CHECKS,\n        ),\n        debug=True,\n        prefix=\"/health\",\n    ),\n)\n\napp_success = FastAPI()\napp_success.include_router(\n    HealthcheckRouter(\n        Probe(\n            name=\"liveness\",\n            checks=[],\n        ),\n        Probe(\n            name=\"readiness\",\n            checks=READINESS_CHECKS_SUCCESS,\n        ),\n        Probe(\n            name=\"startup\",\n            checks=[],\n        ),\n        debug=True,\n        prefix=\"/health\",\n    ),\n)\n\napp_fail = FastAPI()\napp_fail.include_router(\n    HealthcheckRouter(\n        Probe(\n            name=\"liveness\",\n            checks=[],\n        ),\n        Probe(\n            name=\"readiness\",\n            checks=READINESS_CHECKS_FAIL,\n        ),\n        Probe(\n            name=\"startup\",\n            checks=[],\n        ),\n        debug=True,\n        prefix=\"/health\",\n    ),\n)\n\napp_custom = FastAPI()\napp_custom.include_router(\n    HealthcheckRouter(\n        Probe(\n            name=\"liveness\",\n            checks=[],\n            summary=\"Check if the application is alive\",\n        ),\n        Probe(\n            name=\"readiness\",\n            checks=READINESS_CHECKS_SUCCESS,\n            summary=\"Check if the application is ready\",\n        ),\n        Probe(\n            name=\"startup\",\n            checks=[],\n            summary=\"Check if the application is starting up\",\n        ),\n        success_handler=custom_handler,\n        failure_handler=custom_handler,\n        success_status=status.HTTP_200_OK,\n        failure_status=status.HTTP_503_SERVICE_UNAVAILABLE,\n        debug=True,\n        prefix=\"/custom_health\",\n    ),\n)\n</code></pre> <pre><code>import os\nfrom http import HTTPStatus\n\nfrom faststream.asgi import AsgiFastStream\nfrom faststream.kafka import KafkaBroker\n\nfrom examples.probes import (\n    LIVENESS_CHECKS,\n    READINESS_CHECKS,\n    READINESS_CHECKS_FAIL,\n    READINESS_CHECKS_SUCCESS,\n    STARTUP_CHECKS,\n    custom_handler,\n)\nfrom fast_healthchecks.integrations.base import Probe\nfrom fast_healthchecks.integrations.faststream import health\n\nbroker = KafkaBroker(os.environ[\"KAFKA_BOOTSTRAP_SERVERS\"].split(\",\"))\napp_integration = AsgiFastStream(\n    broker,\n    asgi_routes=[\n        *health(\n            Probe(name=\"liveness\", checks=LIVENESS_CHECKS),\n            Probe(name=\"readiness\", checks=READINESS_CHECKS),\n            Probe(name=\"startup\", checks=STARTUP_CHECKS),\n            debug=False,\n            prefix=\"/health\",\n        ),\n    ],\n)\n\napp_success = AsgiFastStream(\n    broker,\n    asgi_routes=[\n        *health(\n            Probe(name=\"liveness\", checks=[]),\n            Probe(name=\"readiness\", checks=READINESS_CHECKS_SUCCESS),\n            Probe(name=\"startup\", checks=[]),\n            debug=False,\n            prefix=\"/health\",\n        ),\n    ],\n)\n\napp_fail = AsgiFastStream(\n    broker,\n    asgi_routes=[\n        *health(\n            Probe(name=\"liveness\", checks=[]),\n            Probe(name=\"readiness\", checks=READINESS_CHECKS_FAIL),\n            Probe(name=\"startup\", checks=[]),\n            debug=False,\n            prefix=\"/health\",\n        ),\n    ],\n)\n\napp_custom = AsgiFastStream(\n    broker,\n    asgi_routes=[\n        *health(\n            Probe(\n                name=\"liveness\",\n                checks=[],\n                summary=\"Check if the application is alive\",\n            ),\n            Probe(\n                name=\"readiness\",\n                checks=READINESS_CHECKS_SUCCESS,\n                summary=\"Check if the application is ready\",\n            ),\n            Probe(\n                name=\"startup\",\n                checks=[],\n                summary=\"Check if the application is starting up\",\n            ),\n            success_handler=custom_handler,\n            failure_handler=custom_handler,\n            success_status=HTTPStatus.OK,\n            failure_status=HTTPStatus.SERVICE_UNAVAILABLE,\n            debug=True,\n            prefix=\"/custom_health\",\n        ),\n    ],\n)\n</code></pre> <pre><code>from litestar import Litestar\nfrom litestar.status_codes import HTTP_200_OK, HTTP_503_SERVICE_UNAVAILABLE\n\nfrom examples.probes import (\n    LIVENESS_CHECKS,\n    READINESS_CHECKS,\n    READINESS_CHECKS_FAIL,\n    READINESS_CHECKS_SUCCESS,\n    STARTUP_CHECKS,\n    custom_handler,\n)\nfrom fast_healthchecks.integrations.base import Probe\nfrom fast_healthchecks.integrations.litestar import health\n\napp_integration = Litestar(\n    route_handlers=[\n        *health(\n            Probe(name=\"liveness\", checks=LIVENESS_CHECKS),\n            Probe(name=\"readiness\", checks=READINESS_CHECKS),\n            Probe(name=\"startup\", checks=STARTUP_CHECKS),\n            debug=False,\n            prefix=\"/health\",\n        ),\n    ],\n)\n\napp_success = Litestar(\n    route_handlers=[\n        *health(\n            Probe(name=\"liveness\", checks=[]),\n            Probe(name=\"readiness\", checks=READINESS_CHECKS_SUCCESS),\n            Probe(name=\"startup\", checks=[]),\n            debug=False,\n            prefix=\"/health\",\n        ),\n    ],\n)\n\napp_fail = Litestar(\n    route_handlers=[\n        *health(\n            Probe(name=\"liveness\", checks=[]),\n            Probe(name=\"readiness\", checks=READINESS_CHECKS_FAIL),\n            Probe(name=\"startup\", checks=[]),\n            debug=False,\n            prefix=\"/health\",\n        ),\n    ],\n)\n\napp_custom = Litestar(\n    route_handlers=[\n        *health(\n            Probe(\n                name=\"liveness\",\n                checks=[],\n                summary=\"Check if the application is alive\",\n            ),\n            Probe(\n                name=\"readiness\",\n                checks=READINESS_CHECKS_SUCCESS,\n                summary=\"Check if the application is ready\",\n            ),\n            Probe(\n                name=\"startup\",\n                checks=[],\n                summary=\"Check if the application is starting up\",\n            ),\n            success_handler=custom_handler,\n            failure_handler=custom_handler,\n            success_status=HTTP_200_OK,\n            failure_status=HTTP_503_SERVICE_UNAVAILABLE,\n            debug=True,\n            prefix=\"/custom_health\",\n        ),\n    ],\n)\n</code></pre> <p>You can find examples for each framework here:</p> <ul> <li>FastAPI example</li> <li>Faststream example</li> <li>Litestar example</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Models for healthchecks.</p> <p>FastAPI integration for health checks.</p> <p>FastStream integration for health checks.</p> <p>FastAPI integration for health checks.</p>"},{"location":"api/#fast_healthchecks.models.HealthCheckResult","title":"<code>HealthCheckResult</code>  <code>dataclass</code>","text":"<p>Result of a healthcheck.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the healthcheck.</p> <code>healthy</code> <code>bool</code> <p>Whether the healthcheck passed.</p> <code>error_details</code> <code>str | None</code> <p>Details of the error if the healthcheck failed.</p> Source code in <code>fast_healthchecks/models.py</code> <pre><code>@dataclass\nclass HealthCheckResult:\n    \"\"\"Result of a healthcheck.\n\n    Attributes:\n        name: Name of the healthcheck.\n        healthy: Whether the healthcheck passed.\n        error_details: Details of the error if the healthcheck failed.\n    \"\"\"\n\n    name: str\n    healthy: bool\n    error_details: str | None = None\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the result.\"\"\"\n        return f\"{self.name}: {'healthy' if self.healthy else 'unhealthy'}\"\n</code></pre>"},{"location":"api/#fast_healthchecks.models.HealthCheckResult.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the result.</p> Source code in <code>fast_healthchecks/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the result.\"\"\"\n    return f\"{self.name}: {'healthy' if self.healthy else 'unhealthy'}\"\n</code></pre>"},{"location":"api/#fast_healthchecks.models.HealthcheckReport","title":"<code>HealthcheckReport</code>  <code>dataclass</code>","text":"<p>Report of healthchecks.</p> <p>Attributes:</p> Name Type Description <code>healthy</code> <code>bool</code> <p>Whether all healthchecks passed.</p> <code>results</code> <code>list[HealthCheckResult]</code> <p>List of healthcheck results.</p> Source code in <code>fast_healthchecks/models.py</code> <pre><code>@dataclass\nclass HealthcheckReport:\n    \"\"\"Report of healthchecks.\n\n    Attributes:\n        healthy: Whether all healthchecks passed.\n        results: List of healthcheck results.\n    \"\"\"\n\n    results: list[HealthCheckResult]\n    allow_partial_failure: bool = False\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the report.\"\"\"\n        return \"\\n\".join(str(result) for result in self.results)\n\n    @property\n    def healthy(self) -&gt; bool:\n        \"\"\"Return whether all healthchecks passed.\"\"\"\n        return all(result.healthy for result in self.results) or self.allow_partial_failure\n</code></pre>"},{"location":"api/#fast_healthchecks.models.HealthcheckReport.healthy","title":"<code>healthy</code>  <code>property</code>","text":"<p>Return whether all healthchecks passed.</p>"},{"location":"api/#fast_healthchecks.models.HealthcheckReport.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the report.</p> Source code in <code>fast_healthchecks/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the report.\"\"\"\n    return \"\\n\".join(str(result) for result in self.results)\n</code></pre>"},{"location":"api/#fast_healthchecks.integrations.fastapi.HealthcheckRouter","title":"<code>HealthcheckRouter</code>","text":"<p>               Bases: <code>APIRouter</code></p> <p>A router for health checks.</p> <p>Parameters:</p> Name Type Description Default <code>probes</code> <code>Probe</code> <p>An iterable of probes to run.</p> <code>()</code> <code>debug</code> <code>bool</code> <p>Whether to include the probes in the schema. Defaults to False.</p> <code>False</code> Source code in <code>fast_healthchecks/integrations/fastapi.py</code> <pre><code>class HealthcheckRouter(APIRouter):\n    \"\"\"A router for health checks.\n\n    Args:\n        probes: An iterable of probes to run.\n        debug: Whether to include the probes in the schema. Defaults to False.\n    \"\"\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        *probes: Probe,\n        success_handler: HandlerType = default_handler,\n        failure_handler: HandlerType = default_handler,\n        success_status: int = status.HTTP_204_NO_CONTENT,\n        failure_status: int = status.HTTP_503_SERVICE_UNAVAILABLE,\n        debug: bool = False,\n        prefix: str = \"/health\",\n        **kwargs: dict[str, Any],\n    ) -&gt; None:\n        \"\"\"Initialize the router.\"\"\"\n        kwargs[\"prefix\"] = prefix  # ty: ignore[invalid-assignment]\n        kwargs[\"tags\"] = [\"Healthchecks\"]  # ty: ignore[invalid-assignment]\n        super().__init__(**kwargs)\n        for probe in probes:\n            self._add_probe_route(\n                probe,\n                success_handler=success_handler,\n                failure_handler=failure_handler,\n                success_status=success_status,\n                failure_status=failure_status,\n                debug=debug,\n            )\n\n    def _add_probe_route(  # noqa: PLR0913\n        self,\n        probe: Probe,\n        *,\n        success_handler: HandlerType = default_handler,\n        failure_handler: HandlerType = default_handler,\n        success_status: int = status.HTTP_204_NO_CONTENT,\n        failure_status: int = status.HTTP_503_SERVICE_UNAVAILABLE,\n        debug: bool = False,\n    ) -&gt; None:\n        probe_handler = make_probe_asgi(\n            probe,\n            success_handler=success_handler,\n            failure_handler=failure_handler,\n            success_status=success_status,\n            failure_status=failure_status,\n            debug=debug,\n        )\n\n        async def handle_request() -&gt; Response:\n            content, headers, status_code = await probe_handler()\n            return Response(content=content, status_code=status_code, headers=headers)\n\n        self.add_api_route(\n            path=f\"/{probe.name}\",\n            endpoint=handle_request,\n            status_code=success_status,\n            summary=probe.endpoint_summary,\n            include_in_schema=debug,\n        )\n</code></pre>"},{"location":"api/#fast_healthchecks.integrations.fastapi.HealthcheckRouter.__init__","title":"<code>__init__(*probes, success_handler=default_handler, failure_handler=default_handler, success_status=status.HTTP_204_NO_CONTENT, failure_status=status.HTTP_503_SERVICE_UNAVAILABLE, debug=False, prefix='/health', **kwargs)</code>","text":"<p>Initialize the router.</p> Source code in <code>fast_healthchecks/integrations/fastapi.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    *probes: Probe,\n    success_handler: HandlerType = default_handler,\n    failure_handler: HandlerType = default_handler,\n    success_status: int = status.HTTP_204_NO_CONTENT,\n    failure_status: int = status.HTTP_503_SERVICE_UNAVAILABLE,\n    debug: bool = False,\n    prefix: str = \"/health\",\n    **kwargs: dict[str, Any],\n) -&gt; None:\n    \"\"\"Initialize the router.\"\"\"\n    kwargs[\"prefix\"] = prefix  # ty: ignore[invalid-assignment]\n    kwargs[\"tags\"] = [\"Healthchecks\"]  # ty: ignore[invalid-assignment]\n    super().__init__(**kwargs)\n    for probe in probes:\n        self._add_probe_route(\n            probe,\n            success_handler=success_handler,\n            failure_handler=failure_handler,\n            success_status=success_status,\n            failure_status=failure_status,\n            debug=debug,\n        )\n</code></pre>"},{"location":"api/#fast_healthchecks.integrations.faststream.health","title":"<code>health(*probes, success_handler=default_handler, failure_handler=default_handler, success_status=HTTPStatus.NO_CONTENT, failure_status=HTTPStatus.SERVICE_UNAVAILABLE, debug=False, prefix='/health')</code>","text":"<p>Make list of routes for healthchecks.</p> Source code in <code>fast_healthchecks/integrations/faststream.py</code> <pre><code>def health(  # noqa: PLR0913\n    *probes: Probe,\n    success_handler: HandlerType = default_handler,\n    failure_handler: HandlerType = default_handler,\n    success_status: int = HTTPStatus.NO_CONTENT,\n    failure_status: int = HTTPStatus.SERVICE_UNAVAILABLE,\n    debug: bool = False,\n    prefix: str = \"/health\",\n) -&gt; Iterable[tuple[str, \"ASGIApp\"]]:\n    \"\"\"Make list of routes for healthchecks.\"\"\"\n    return [\n        _add_probe_route(\n            probe,\n            success_handler=success_handler,\n            failure_handler=failure_handler,\n            success_status=success_status,\n            failure_status=failure_status,\n            debug=debug,\n            prefix=prefix,\n        )\n        for probe in probes\n    ]\n</code></pre>"},{"location":"api/#fast_healthchecks.integrations.litestar.health","title":"<code>health(*probes, success_handler=default_handler, failure_handler=default_handler, success_status=HTTPStatus.NO_CONTENT, failure_status=HTTPStatus.SERVICE_UNAVAILABLE, debug=False, prefix='/health')</code>","text":"<p>Make list of routes for healthchecks.</p> Source code in <code>fast_healthchecks/integrations/litestar.py</code> <pre><code>def health(  # noqa: PLR0913\n    *probes: Probe,\n    success_handler: HandlerType = default_handler,\n    failure_handler: HandlerType = default_handler,\n    success_status: int = HTTPStatus.NO_CONTENT,\n    failure_status: int = HTTPStatus.SERVICE_UNAVAILABLE,\n    debug: bool = False,\n    prefix: str = \"/health\",\n) -&gt; Iterable[HTTPRouteHandler]:\n    \"\"\"Make list of routes for healthchecks.\"\"\"\n    return [\n        _add_probe_route(\n            probe,\n            success_handler=success_handler,\n            failure_handler=failure_handler,\n            success_status=success_status,\n            failure_status=failure_status,\n            debug=debug,\n            prefix=prefix,\n        )\n        for probe in probes\n    ]\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#024-2025-09-19","title":"0.2.4 (2025-09-19)","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>typing: make typing not failable</li> </ul>"},{"location":"changelog/#023-2025-09-19","title":"0.2.3 (2025-09-19)","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>all: upgrade dependencies, make tests more stable, swith <code>mypy</code> to <code>ty</code></li> </ul>"},{"location":"changelog/#022-2025-04-16","title":"0.2.2 (2025-04-16)","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>all: make PEP 561 compatible</li> </ul>"},{"location":"changelog/#021-2025-03-07","title":"0.2.1 (2025-03-07)","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>mongo: added support multihost for MongoDB</li> </ul>"},{"location":"changelog/#020-2025-02-20","title":"0.2.0 (2025-02-20)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>healthchecks: added OpenSearch healthcheck</li> </ul>"},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>dependencies: upgrade github actions</li> <li>vscode: fixed ruff plugin setup</li> <li>dependencies: upgrade dependencies</li> <li>dependencies: upgrade pre-commit</li> <li>docs: typo in install commands</li> </ul>"},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>tests: move out tests <code>to_dict</code> method</li> </ul>"},{"location":"changelog/#015-2025-01-23","title":"0.1.5 (2025-01-23)","text":""},{"location":"changelog/#fix_5","title":"Fix","text":"<ul> <li>redis: added support for ssl connections</li> </ul>"},{"location":"changelog/#014-2025-01-22","title":"0.1.4 (2025-01-22)","text":""},{"location":"changelog/#fix_6","title":"Fix","text":"<ul> <li>dependencies: upgrade dependencies and pre-commit</li> <li>mongo: fixed Mongo check</li> </ul>"},{"location":"changelog/#013-2024-12-10","title":"0.1.3 (2024-12-10)","text":""},{"location":"changelog/#fix_7","title":"Fix","text":"<ul> <li>validate_dsn: removed dummy validation isinstance</li> </ul>"},{"location":"changelog/#012-2024-12-10","title":"0.1.2 (2024-12-10)","text":""},{"location":"changelog/#fix_8","title":"Fix","text":"<ul> <li>setuptools: included packages</li> <li>docs: changed logo for documentation to green color</li> </ul>"},{"location":"changelog/#011-2024-12-09","title":"0.1.1 (2024-12-09)","text":""},{"location":"changelog/#fix_9","title":"Fix","text":"<ul> <li>docs: fixed <code>README.md</code></li> </ul>"},{"location":"changelog/#010-2024-12-09","title":"0.1.0 (2024-12-09)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>all: \ud83d\ude80 INIT</li> </ul>"}]}